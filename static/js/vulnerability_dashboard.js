const FiveScaleColor = {
    red: {'one': 'rgb(255, 192, 0)',
        'two': 'rgb(255, 96, 0)',
        'three': 'rgb(255, 0, 0)',
        'four': 'rgb(160, 0 , 0)',
        'five': 'rgb(64, 0, 0)'},
    blue: {'one': 'rgb(192, 255, 255)',
        'two': 'rgb(0, 96, 255)',
        'three': 'rgb(0, 0, 255)',
        'four': 'rgb(0, 0 , 160)',
        'five': 'rgb(0, 0, 64)'},
    yellow: {'one': 'rgb(255, 255, 192)',
        'two': 'rgb(255, 255, 96)',
        'three': 'rgb(255, 255, 0)',
        'four': 'rgb(160, 160 , 0)',
        'five': 'rgb(64, 64, 0)'},
    undefined: 'rgb(155, 155, 155)'
}

function polygon_base_style(color) { return {
        fillColor: color,
        fillOpacity: 0.60,
        fill: true,
        weight: 0.5,
        color: 'black'}
}

function point_base_style(color) {return {
    radius: 2,
    fillOpacity: 1,
    fill: true,
    color: color,
    fillColor: color,
    weight: 0}
}

function continuousBlueColorScale(percent) {
    return `rgb(0, ${(192 * (1- (percent / 100)))}, ${255 * (1- (percent / 100))})`
}


function adaStyle (classification) {
    if (classification === undefined) {
        return polygon_base_style(FiveScaleColor.undefined)
    }
    else {
        if (classification === 'low') {
            return polygon_base_style(FiveScaleColor.red.one)
        }
        else if (classification === 'veryLow'){
            return polygon_base_style(FiveScaleColor.red.two)
        }
        else if (classification === 'average'){
            return polygon_base_style(FiveScaleColor.red.three)
        }
        else if (classification === 'high'){
            return polygon_base_style(FiveScaleColor.red.four)
        }
        else if (classification === 'veryHigh'){
            return polygon_base_style(FiveScaleColor.red.five)
        }
    }
}

function daStyle(percent) {
    return polygon_base_style(continuousBlueColorScale(percent))
}

function vegetationStyle(percent) {
    if (percent <= 10) {
        return point_base_style('Red')
    }
    else if (percent > 10 && percent <= 20) {
        return point_base_style('Orange')
    }
    else if (percent > 20 && percent <= 30) {
        return point_base_style('Yellow')
    }
    else if (percent > 30 && percent <= 40) {
        return point_base_style('greenYellow')
    }
    else if (percent > 40 && percent <= 50){
        return point_base_style('Green')
    }
    else if (percent > 50) {
        return point_base_style('DarkGreen')
    }
    else {
        return('Grey')
    }
}

function vulnerabilityString(vulnerability_level) {
    if (vulnerability_level === 'veryLow' ) {
        return "Très faible"
    }
    else if (vulnerability_level === 'low') {
        return "Faible"
    }
    else if (vulnerability_level === 'average'){
        return "Moyen"
    }
    else if (vulnerability_level === 'high') {
        return "Élevé"
    }
    else if (vulnerability_level === 'veryHigh' ) {
        return "Très élevé"
    }
}
function popupContent(age_65, age_75, age_85, lico, degree, renter, one_person, vulnerability) {
    let vulnerability_text = vulnerabilityString(vulnerability)
    return `<p><b>65 ans et plus (%) :</b> ${age_65} </p>
            <p><b>75 ans et plus (%) :</b> ${age_75} </p>
            <p><b>85 ans et plus (%) :</b> ${age_85} </p>
            <p><b>Faible revenu (%) :</b> ${lico} </p>
            <p><b>Sans diplôme (%) :</b> ${degree} </p>
            <p><b>Locataire (%) :</b> ${renter} </p>
            <p><b>Ménage seul (%) :</b> ${one_person} </p>
            <p><b>Niveau de vulnérabilité :</b> ${vulnerability_text} </p>`
}
function dashboard_map_vulnerability(map, options) {
        function load_layer(vulnerability_level) {
            return L.vectorGrid.protobuf(`http://127.0.0.1:8000/layer/ADA-census-2018/{z}/{x}/{y}/${vulnerability_level}`,
            {rendererFactory: L.svg.tile, interactive: true,
            vectorTileLayerStyles:{'ada_census_2018': properties => {return adaStyle(properties.vulnerability_level)}}
            });
        }

        var default_selected_vulnerability = "\'veryLow\',\'low\', \'average\', \'high\', \'veryHigh\'"

        var pbfLayer= load_layer(default_selected_vulnerability)

        map.addLayer(pbfLayer)

        pbfLayer.on('click', function (e){
        L.popup().setContent(popupContent(
            e.layer.properties.age_65_over_pct,
            e.layer.properties.age_75_over_pct,
            e.layer.properties.age_85_over_pct,
            e.layer.properties.lico_at_pct,
            e.layer.properties.no_degree_pct,
            e.layer.properties.renter_pct,
            e.layer.properties.one_person_household_pct,
            e.layer.properties.vulnerability_level)).setLatLng(e.latlng).openOn(map)
        });


        var zoom_widget = L.control({position: "topright"})
        zoom_widget.onAdd = function (map) {
            var div = L.DomUtil.create('div', 'info')

            div.innerHTML += `Niveau de zoom : ${map.getZoom()}`
            return div
        }
        zoom_widget.addTo(map)

        map.on("zoomend", function() {
        zoom_widget.addTo(map)
        });

        var legend = L.control({position: 'bottomright'});
        legend.onAdd = function (map) {

            var div = L.DomUtil.create('div', 'info legend');

            div.innerHTML += '<b> Niveau de vulnérabilité</b><br>'
            div.innerHTML += '<i style="background:' + FiveScaleColor.red.one + '"></i>' + 'Très faible' + '<br>';
            div.innerHTML += '<i style="background:' + FiveScaleColor.red.two + '"></i>' + 'Faible' + '<br>';
            div.innerHTML += '<i style="background:' + FiveScaleColor.red.three + '"></i>' + 'Moyen' + '<br>';
            div.innerHTML += '<i style="background:' + FiveScaleColor.red.four + '"></i>' + 'Élevé' + '<br>';
            div.innerHTML += '<i style="background:' + FiveScaleColor.red.five + '"></i>' + 'Très élevé' + '<br>';
            div.innerHTML += '<i style="background:' + FiveScaleColor.undefined + '"></i>' + 'Non défini' + '<br>';

            return div;
        }
        legend.addTo(map)

        $("#vulnerabilityVeryLow_M1, #vulnerabilityLow_M1, #vulnerabilityAverage_M1, #vulnerabilityHigh_M1," +
            " #vulnerabilityVeryHigh_M1").change(function() {
        var selected_vulneratiblity = new Array()

        if ($('#vulnerabilityVeryLow_M1').is(':checked')){
            selected_vulneratiblity.push("\'veryLow\'");
        }
        if ($('#vulnerabilityLow_M1').is(':checked')){
            selected_vulneratiblity.push("\'low\'");
        }
        if ($('#vulnerabilityAverage_M1').is(':checked')){
            selected_vulneratiblity.push("\'average\'");
        }
        if ($('#vulnerabilityHigh_M1').is(':checked')){
            selected_vulneratiblity.push("\'high\'");
        }
        if ($('#vulnerabilityVeryHigh_M1').is(':checked')){
            selected_vulneratiblity.push("\'veryHigh\'");
        }
        map.removeLayer(pbfLayer)

        pbfLayer = load_layer(selected_vulneratiblity.toString())
        map.addLayer(pbfLayer)
        pbfLayer.on('click', function (e){
        L.popup().setContent(popupContent(
            e.layer.properties.age_65_over_pct,
            e.layer.properties.age_75_over_pct,
            e.layer.properties.age_85_over_pct,
            e.layer.properties.lico_at_pct,
            e.layer.properties.no_degree_pct,
            e.layer.properties.renter_pct,
            e.layer.properties.one_person_household_pct,
            e.layer.properties.vulnerability_level)).setLatLng(e.latlng).openOn(map)
        });
        })
}

function dashboard_map_adaptation(map, options) {

    function load_layer_census(vulnerability_level, sensitivity) {
    return L.vectorGrid.protobuf(`http://127.0.0.1:8000/layer/DA-census-2018/{z}/{x}/{y}/${vulnerability_level}`,
    {rendererFactory: L.svg.tile, interactive: true,
        vectorTileLayerStyles:{'da_census_2018': properties => {return daStyle(properties[sensitivity])}}
        });
        }

    function load_layer_vegetation(vulnerability_level) {
        return L.vectorGrid.protobuf(`http://127.0.0.1:8000/layer/household-vegetation-2018/{z}/{x}/{y}/${vulnerability_level}`,
    {rendererFactory: L.svg.tile, interactive: true,
        vectorTileLayerStyles:{'household_vegetation_2018': properties => {return vegetationStyle(properties.vegetation_pct)}}
        });
        }

    var default_selected_vulnerability = "\'high\', \'veryHigh\'"

    let pbfLayerCensus = load_layer_census(default_selected_vulnerability, 'age_65_over_pct')
    let pbfLayerVegetation=load_layer_vegetation(default_selected_vulnerability)
    var zoom_level = map.getZoom();

    map.addLayer(pbfLayerCensus)

    var zoom_widget = L.control({position: "topright"})
    zoom_widget.onAdd = function (map) {
        var div = L.DomUtil.create('div', 'info')

        div.innerHTML += `Niveau de zoom : ${map.getZoom()}`
        return div
    }
    zoom_widget.addTo(map)

    map.on("zoomend", function() {
        zoom_widget.addTo(map)
        zoom_level = map.getZoom()
        if (zoom_level < 14){
            if (map.hasLayer(pbfLayerVegetation)) {
                map.removeLayer(pbfLayerVegetation);
            }
        }
        else {
            if (!map.hasLayer(pbfLayerVegetation)) {
                map.addLayer(pbfLayerVegetation);
            }
        }
    });

    pbfLayerCensus.on('click', function (e){
        L.popup().setContent(popupContent(
            e.layer.properties.age_65_over_pct,
            e.layer.properties.age_75_over_pct,
            e.layer.properties.age_85_over_pct,
            e.layer.properties.lico_at_pct,
            e.layer.properties.no_degree_pct,
            e.layer.properties.renter_pct,
            e.layer.properties.one_person_household_pct,
            e.layer.properties.vulnerability_level)).setLatLng(e.latlng).openOn(map)
    });

    var legend = L.control({position: 'bottomright'});

    legend.onAdd = function (map) {

        var div = L.DomUtil.create('div', 'info legend');

        div.innerHTML += '<b> Niveau de sensibilité</b><br>'
        div.innerHTML += '<i style="background:' + continuousBlueColorScale(0) + '"></i>' + '0%' + '<br>';
        div.innerHTML += '<i style="background:' + continuousBlueColorScale(20) + '"></i>' + '20%' + '<br>';
        div.innerHTML += '<i style="background:' + continuousBlueColorScale(40) + '"></i>' + '40%' + '<br>';
        div.innerHTML += '<i style="background:' + continuousBlueColorScale(60) + '"></i>' + '60%' + '<br>';
        div.innerHTML += '<i style="background:' + continuousBlueColorScale(80) + '"></i>' + '80%' + '<br>';
        div.innerHTML += '<i style="background:' + continuousBlueColorScale(100) + '"></i>' + '100%' + '<br>';

        div.innerHTML += '<b> Niveau de végétation</b><br> (Niveau de zoom 14 et +) <br>'
        div.innerHTML += '<i style="background:' + 'red' + '"></i>' + '0% - 10%' + '<br>';
        div.innerHTML += '<i style="background:' + 'orange' + '"></i>' + '10% - 20%' + '<br>';
        div.innerHTML += '<i style="background:' + 'yellow' + '"></i>' + '20% - 30%' + '<br>';
        div.innerHTML += '<i style="background:' + 'greenyellow' + '"></i>' + '30% - 40%' + '<br>';
        div.innerHTML += '<i style="background:' + 'green' + '"></i>' + '40% - 50%' + '<br>';
        div.innerHTML += '<i style="background:' + 'darkgreen' + '"></i>' + '50% +' + '<br>';

        div.innerHTML += '<i style="background:' + FiveScaleColor.undefined + '"></i>' + 'Non défini' + '<br>';

        return div;
    }
    legend.addTo(map)

        $("#vulnerabilityVeryLow_M2, #vulnerabilityLow_M2, #vulnerabilityAverage_M2, #vulnerabilityHigh_M2, #vulnerabilityVeryHigh_M2, #dropdownSensitivity").change(function() {
        var selected_vulneratiblity_m2 = new Array()

        if ($('#vulnerabilityVeryLow_M2').is(':checked')){
            selected_vulneratiblity_m2.push("\'veryLow\'");
        }
        if ($('#vulnerabilityLow_M2').is(':checked')){
            selected_vulneratiblity_m2.push("\'low\'");
        }
        if ($('#vulnerabilityAverage_M2').is(':checked')){
            selected_vulneratiblity_m2.push("\'average\'");
        }
        if ($('#vulnerabilityHigh_M2').is(':checked')){
            selected_vulneratiblity_m2.push("\'high\'");
        }
        if ($('#vulnerabilityVeryHigh_M2').is(':checked')){
            selected_vulneratiblity_m2.push("\'veryHigh\'");
        }
        map.removeLayer(pbfLayerCensus)
        map.removeLayer(pbfLayerVegetation)

        pbfLayerCensus = load_layer_census(selected_vulneratiblity_m2.toString(), $('#dropdownSensitivity').val())
        pbfLayerVegetation = load_layer_vegetation(selected_vulneratiblity_m2.toString())

        if (zoom_level >= 14){
           map.addLayer(pbfLayerCensus)
           map.addLayer(pbfLayerVegetation)
        }
        else {
            map.addLayer(pbfLayerCensus)
        }

        pbfLayerCensus.on('click', function (e){
        L.popup().setContent(popupContent(
            e.layer.properties.age_65_over_pct,
            e.layer.properties.age_75_over_pct,
            e.layer.properties.age_85_over_pct,
            e.layer.properties.lico_at_pct,
            e.layer.properties.no_degree_pct,
            e.layer.properties.renter_pct,
            e.layer.properties.one_person_household_pct,
            e.layer.properties.vulnerability_level)).setLatLng(e.latlng).openOn(map)
        });
        })
}

    // for debugging purposes inside a map function
    // var pbfLayer=L.vectorGrid.protobuf("http://127.0.0.1:8000/layer/DA-census-2018/{z}/{x}/{y}",
    // {rendererFactory: L.svg.tile, interactive: true,
    //     vectorTileLayerStyles:{'da_census_2018': properties => {return daStyle(properties.age_65_over_pct)}}
    //     }).on('click',function(e) {
    // console.dir(e.layer._eventParents);
    // console.log('hi');
    // L.DomEvent.stop(e);}).addTo(map);


