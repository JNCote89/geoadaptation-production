from dash import Output, Input, html, dcc
import dash_bootstrap_components as dbc
import plotly.express as px
from django_plotly_dash import DjangoDash
import json

import geopandas as gpd
from shapely.geometry import Polygon, box

import os
from django.conf import settings

app = DjangoDash('plotly_vulnerability', external_stylesheets=[dbc.themes.SPACELAB])

db_gpkg_region = gpd.read_file(os.path.join(settings.MEDIA_ROOT, 'web_dashboard_stats_simplified.gpkg'),
                               layer='region_stats_simplified_21').copy()
unique_region = db_gpkg_region['Reg_name'].unique().tolist()

db_gpkg_mrc = gpd.read_file(os.path.join(settings.MEDIA_ROOT, 'web_dashboard_stats_simplified.gpkg'),
                            layer='MRC_stats_simplified_21').copy()
unique_mrc = db_gpkg_mrc['MRC_name'].unique().tolist()

db_gpkg_mun = gpd.read_file(os.path.join(settings.MEDIA_ROOT, 'web_dashboard_stats_simplified.gpkg'),
                            layer='mun_stats_simplified_21').copy()
unique_mun = db_gpkg_mun['Mun_name'].unique().tolist()

db_gpkg_DA = gpd.read_file(os.path.join(settings.MEDIA_ROOT, 'web_dashboard_stats_simplified.gpkg'),
                           layer='DA_stats_simplified_21').copy()
unique_DA = db_gpkg_DA['DAUID'].unique().tolist()

unique_stats = [col_name for col_name in db_gpkg_region if col_name.endswith('rank')]

app.layout = dbc.Container([
    dbc.Row([
        dbc.Col([html.H5('Region filter'), dbc.Container(
            dcc.Dropdown(unique_region, id='region_dropdown', multi=True, placeholder='Select one or more region',
                         value=[])),
                 html.H5('MRC filter'), dbc.Container(
                dcc.Dropdown(unique_mrc, id='mrc_dropdown', multi=True, placeholder='Select one or more MRC',
                             value=[])),
                 html.H5('Municipality filter'), dbc.Container(
                dcc.Dropdown(unique_mun, id='mun_dropdown', multi=True, placeholder='Select one or more municipality',
                             value=[])),
                 html.H5('Dissemination area filter'), dbc.Container(
                dcc.Dropdown(unique_DA, id='da_dropdown', multi=True,
                             placeholder='Select one or more dissemination area', value=[]))]
                ),
        dbc.Col([html.H5('Maximum map resolution'), dbc.Container(
            dcc.RadioItems(['Region', 'MRC', 'Municipality', 'Dissemination area'], 'Dissemination area',
                           id='res_radio', inline=True, labelStyle={'padding': '12px'})),
                 html.H5('Map statististics (percentile)'),
                 dbc.Container(dcc.Dropdown(unique_stats, id='stats_dropdown', value='hw_max_rank'))])
    ]),
    dbc.Row([
        dbc.Col([dbc.Container(dcc.Graph(id='vulnerability_map')),
                 ])
    ]),
    dcc.Store('session_memory', data={})])


def create_map(db_region, db_mrc, db_mun, db_DA, stats, map_resolution, zoom, map_extent):

    polygon_extent = Polygon(map_extent)
    polygon_center = polygon_extent.centroid.coords
    map_center = {'lat': polygon_center[0][-1], 'lon': polygon_center[0][0]}

    extent_region = gpd.GeoDataFrame(index=[0], crs='epsg:4326', geometry=[polygon_extent])

    gdf_region = db_region.overlay(extent_region, how='intersection').set_index('Reg_name')
    gdf_mrc = db_mrc.overlay(extent_region, how='intersection').set_index('MRC_name')
    gdf_mun = db_mun.overlay(extent_region, how='intersection').set_index('Mun_name')
    gdf_da = db_DA.overlay(extent_region, how='intersection').set_index('DAUID')

    if map_resolution == 0:
        fig_map = px.choropleth_mapbox(mapbox_style='carto-positron', data_frame=gdf_da,
                                       geojson=gdf_da['geometry'],
                                       color=stats,
                                       locations=gdf_da.index, height=600, center=map_center, zoom=zoom,
                                       opacity=0.85,
                                       color_continuous_scale='reds')

        fig_map.update_traces(marker_line_width=0.1)

        fig_map.update_layout(
            mapbox_layers=[
                {
                    "source": json.loads(gdf_region.geometry.to_json()),
                    'type': 'line',
                    'line': {'width': 1},
                    'name': 'region'
                },
                {
                    "source": json.loads(gdf_mrc.geometry.to_json()),
                    'type': 'line',
                    'line': {'width': 0.5},
                    'name': 'mrc'
                },
                {
                    "source": json.loads(gdf_mun.geometry.to_json()),
                    'type': 'line',
                    'line': {'width': 0.25},
                    'name': 'municipality'
                }
            ])

    elif map_resolution == 1:
        fig_map = px.choropleth_mapbox(mapbox_style='carto-positron', data_frame=gdf_mun,
                                       geojson=gdf_mun['geometry'],
                                       color=stats,
                                       locations=gdf_mun.index, height=600, center=map_center, zoom=zoom,
                                       opacity=0.85,
                                       color_continuous_scale='reds')

        fig_map.update_traces(marker_line_width=0.1)
        fig_map.update_layout(
            mapbox_layers=[
                {
                    "source": json.loads(gdf_region.geometry.to_json()),
                    'type': 'line',
                    'line': {'width': 1},
                    'name': 'region'
                },
                {
                    "source": json.loads(gdf_mrc.geometry.to_json()),
                    'type': 'line',
                    'line': {'width': 0.85},
                    'name': 'mrc'
                }
            ])

    elif map_resolution == 2:
        fig_map = px.choropleth_mapbox(mapbox_style='carto-positron', data_frame=gdf_mrc,
                                       geojson=gdf_mrc['geometry'],
                                       color=stats,
                                       locations=gdf_mrc.index, height=600, center=map_center, zoom=zoom,
                                       opacity=0.85,
                                       color_continuous_scale='reds')

        fig_map.update_traces(marker_line_width=0.1)
        fig_map.update_layout(
            mapbox_layers=[
                {
                    "source": json.loads(gdf_region.geometry.to_json()),
                    'type': 'line',
                    'line': {'width': 1},
                    'name': 'region'
                },
            ])

    else:
        fig_map = px.choropleth_mapbox(mapbox_style='carto-positron', data_frame=gdf_region,
                                       geojson=gdf_region['geometry'],
                                       color=stats,
                                       locations=gdf_region.index, height=600, center=map_center, zoom=zoom,
                                       opacity=0.85,
                                       color_continuous_scale='reds')

        fig_map.update_traces(marker_line_width=0.1)

    return fig_map


def map_navigation(map_panning):
    zoom = 7
    extent = [[-76, 48], [-69, 48], [-69, 44], [-76, 44]]
    try:
        if 'mapbox.zoom' in map_panning:
            zoom = map_panning['mapbox.zoom']
    except:
        pass

    try:
        if 'mapbox._derived' in map_panning:
            extent = map_panning['mapbox._derived']['coordinates']
    except:
        pass

    return zoom, extent


def filter_da(db_da, region_filter, mrc_filter, mun_filter, da_filter):
    if region_filter:
        region_list = region_filter
    else:
        region_list = unique_region

    if mrc_filter:
        mrc_list = mrc_filter
    else:
        mrc_list = unique_mrc

    if mun_filter:
        mun_list = mun_filter
    else:
        mun_list = unique_mun

    if da_filter:
        DA_list = da_filter
    else:
        DA_list = unique_DA

    db_filtered = db_da.query(f"Reg_name in {region_list} & MRC_name in {mrc_list} "
                              f"& Mun_name in {mun_list} & DAUID in {DA_list}")

    return db_filtered


def filter_mun(db_mun, region_filter, mrc_filter, mun_filter):
    if region_filter:
        region_list = region_filter
    else:
        region_list = unique_region

    if mrc_filter:
        mrc_list = mrc_filter
    else:
        mrc_list = unique_mrc

    if mun_filter:
        mun_list = mun_filter
    else:
        mun_list = unique_mun

    db_filtered = db_mun.query(f"Reg_name in {region_list} & MRC_name in {mrc_list} "
                               f"& Mun_name in {mun_list}")

    return db_filtered


def filter_mrc(db_mrc, region_filter, mrc_filter):
    if region_filter:
        region_list = region_filter
    else:
        region_list = unique_region

    if mrc_filter:
        mrc_list = mrc_filter
    else:
        mrc_list = unique_mrc

    db_filtered = db_mrc.query(f"Reg_name in {region_list} & MRC_name in {mrc_list}")

    return db_filtered


def filter_region(db_region, region_filter):
    if region_filter:
        region_list = region_filter
    else:
        region_list = unique_region

    db_filtered = db_region.query(f"Reg_name in {region_list}")

    return db_filtered


def set_map_resolution(map_res, map_zoom):
    resolution_list = []

    if map_res == 'Dissemination area':
        resolution_list.append(0)
    elif map_res == 'Municipality':
        resolution_list.append(1)
    elif map_res == 'MRC':
        resolution_list.append(2)
    elif map_res == 'Region':
        resolution_list.append(3)

    if map_zoom >= 10:
        resolution_list.append(0)
    elif 8 <= map_zoom < 10:
        resolution_list.append(1)
    elif 6 <= map_zoom < 8:
        resolution_list.append(2)
    elif map_zoom < 6:
        resolution_list.append(3)

    return max(resolution_list)


@app.callback(
    Output(component_id='vulnerability_map', component_property='figure'),
    Output(component_id='session_memory', component_property='data'),
    Input(component_id='region_dropdown', component_property='value'),
    Input(component_id='mrc_dropdown', component_property='value'),
    Input(component_id='mun_dropdown', component_property='value'),
    Input(component_id='da_dropdown', component_property='value'),
    Input(component_id='res_radio', component_property='value'),
    Input(component_id='stats_dropdown', component_property='value'),
    Input(component_id='vulnerability_map', component_property='relayoutData'),
    Input(component_id='session_memory', component_property='data'),
)

def update_dashboard(region_dropdown, mrc_dropdown, mun_dropdown, da_dropdown, radio_res, stats_dropdown,
                     map_relayoutData, session_memory, **kwargs):
    callback_context = kwargs['callback_context']

    map_zoom, map_extent = map_navigation(map_panning=map_relayoutData)
    set_map_res = set_map_resolution(map_res=radio_res, map_zoom=map_zoom)

    if callback_context.triggered:
        if callback_context.triggered[0]['prop_id'] == 'region_dropdown.value':
            if callback_context.triggered[0]['value']:
                set_map_res = 3
                map_zoom = 5.5
                region_extent = box(
                    *db_gpkg_region.query(f"Reg_name in {callback_context.triggered[0]['value']}").total_bounds)
                xx, yy = region_extent.exterior.coords.xy
                map_extent = [coord for coord in zip(xx.tolist(), yy.tolist())]

        elif callback_context.triggered[0]['prop_id'] == 'mrc_dropdown.value':
            if callback_context.triggered[0]['value']:
                set_map_res = 1
                map_zoom = 7
                region_extent = box(
                    *db_gpkg_mrc.query(f"MRC_name in {callback_context.triggered[0]['value']}").total_bounds)
                xx, yy = region_extent.exterior.coords.xy
                map_extent = [coord for coord in zip(xx.tolist(), yy.tolist())]

        elif callback_context.triggered[0]['prop_id'] == 'mun_dropdown.value':
            if callback_context.triggered[0]['value']:
                set_map_res = 0
                map_zoom = 12
                region_extent = box(
                    *db_gpkg_mun.query(f"Mun_name in {callback_context.triggered[0]['value']}").total_bounds)
                xx, yy = region_extent.exterior.coords.xy
                map_extent = [coord for coord in zip(xx.tolist(), yy.tolist())]

        elif callback_context.triggered[0]['prop_id'] == 'da_dropdown.value':
            if callback_context.triggered[0]['value']:
                set_map_res = 0
                map_zoom = 14
                region_extent = box(*db_gpkg_DA.query(f"DAUID in {callback_context.triggered[0]['value']}").total_bounds)
                xx, yy = region_extent.exterior.coords.xy
                map_extent = [coord for coord in zip(xx.tolist(), yy.tolist())]

        elif callback_context.triggered[0]['prop_id'] == 'stats_dropdown.value':
            if callback_context.triggered[0]['value']:
                set_map_res = session_memory['resolution']
                map_zoom = session_memory['zoom']
                map_extent = session_memory['extent']

    region_data = filter_region(db_region=db_gpkg_region, region_filter=region_dropdown)
    mrc_data = filter_mrc(db_mrc=db_gpkg_mrc, region_filter=region_dropdown, mrc_filter=mrc_dropdown)
    mun_data = filter_mun(db_mun=db_gpkg_mun, region_filter=region_dropdown, mrc_filter=mrc_dropdown,
                          mun_filter=mun_dropdown)
    DA_data = filter_da(db_da=db_gpkg_DA, region_filter=region_dropdown, mrc_filter=mrc_dropdown,
                        mun_filter=mun_dropdown, da_filter=da_dropdown)

    print("Zoom : ", map_zoom, 'Extent : ', map_extent)
    session_memory = {'zoom': map_zoom, 'extent': map_extent, 'resolution': set_map_res}
    vulnerability_map = create_map(db_region=region_data, db_mrc=mrc_data, db_mun=mun_data, db_DA=DA_data,
                                   stats=stats_dropdown, map_resolution=set_map_res,
                                   zoom=map_zoom, map_extent=map_extent)

    return vulnerability_map, session_memory